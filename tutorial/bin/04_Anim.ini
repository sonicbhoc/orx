; orx - Tutorial config file
; Should be used with orx v.1.4+

[Display]
; In this example, we use the same size for the screen display than our camera's frustum so as to obtain a 1:1 ratio
ScreenWidth   = @Camera.FrustumWidth
ScreenHeight  = @Camera.FrustumHeight
Title         = Anim Tutorial
Smoothing     = false; <= Deactivates smoothing (no blur when zooming)

[Resource]
Texture       = ../data/object # ../data/anim

[Input]
KEY_ESCAPE    = Quit

KEY_LEFT      = GoLeft
KEY_RIGHT     = GoRight
KEY_UP        = ScaleUp
KEY_DOWN      = ScaleDown

[Viewport]
Camera        = Camera

[Camera]
FrustumWidth  = 800
FrustumHeight = 600
FrustumFar    = 1.0
FrustumNear   = 0.0
Position      = (0.0, 0.0, -1.0)

[Pivot]
; This define the pivot we will use for all our animation frames
Pivot         = (15.0, 31.0)

[Graphic@Pivot]
; This is the main graphic object, used when no animation is played
Texture       = soldier.png

[Soldier]
Graphic       = Graphic
AnimationSet  = AnimSet
Scale         = 4.0
;AnimationFrequency  = 2.0f; <= This can override the animation set's Frequency property

[AnimSet]
; Reading frames from left to right (ie. row -> right), then top to bottom (ie. column -> down)
; right # down is the default, so we don't actually have to manually specify it
Direction     = right # down
; This is the starting point of the animation graph itself (all other animations will be discovered from this one)
; This will also be the first animation that's going to be played
StartAnim     = IdleRight
; This defines the default duration for a single frame
; It can be overridden at the animation level or even at the frame level, using the same property name
KeyDuration   = 0.1
; This says how many digits should be used as a suffix for animation frames
; Ie. for the animation WalkRight, the frames will be WalkRight1, WalkRight2, etc...
Digits        = 1
; This is the default frame size for all the frames of all the animations
FrameSize     = (32, 32, 0)

; This defines the texture used by the animations for their frames
; We can of course use different textures per frame, but this tutorial shows how it's done
; with a single texture (aka atlas) containing all the frames
Texture       = soldier_full.png ; <= This property will be inherited by all the frames
Pivot         = @Pivot ; <= This property will be inherited by all the frames

; This defines the actual animation content and the properties of its frames
; IdleRight, IdleLeft, WalkRight and WalkLeft will always be the animation names visible to the user
; And those can be re-used between different animation graphs
; However IdleRight, etc... define the specific content for this soldier
; The value tells how many frames we expect to create
; if value > 0, that will be the maximum frames that will be created for the animation
; if value = 0, frames will stop being created when no matching config section exists
; if value < 0, frames will be created as long as there's space to create them in the texture (aka atlas) itself, from left to right, then top to bottom, this is the default value if not specified

IdleRight     = 1 ; <= We only want one frame
IdleLeft      = 1
WalkRight     = -1 ; <= We want as many frame that can fit in the texture defined by WalkRight, however we wouldn't actually need to specify it here as -1 is the default value
WalkLeft      = -1

; Here we set all the animation links, this will define the whole animation graph
; Properties can be added to any link by adding special markers in front of the name of the destination animation, as follow:
; - a '.' means the link will be immediate (ie. not waiting for the current animation to finish)
; - a '!' means the current target property will be cleared when this link is used
; - a '+' means this link as a higher priority than normal, ie. without any animation target set, it will be used instead of any other lower priority animation link
; - a '-' means this link as a lower priority than normal, ie. without any animation target set, it won't be used unless there no higher priority animation link

IdleRight->   = IdleRight # .IdleLeft # .WalkRight ; <= When going from IdleRight to IdleLeft or WalkRight, the IdleRight animation will be interrupted
IdleLeft->    = IdleLeft # .IdleRight # .WalkLeft
WalkRight->   = WalkRight # .+IdleRight ; <= When going from WalkRight to IdleRight, the WalkRight animation will be interrupted and if no animation target is defined, WalkRight will always lead to IdleRight
WalkLeft->    = WalkLeft # .+IdleLeft

;Frequency   = 0.2; <= This property can be overridden by the object's AnimationFrequency

; !!! NB: We should *NOT* be using inheritance when defining animations as it will be replaced at runtime to inherit parameters defined at the animation set level
[IdleLeft]
; Here we're using the same settings as for IdleRight but the graphic will be flipped horizontally
Flip          = x

; !!! NB: We should *NOT* be using inheritance when defining animations as it will be replaced at runtime to inherit parameters defined at the animation set level
[WalkLeft]
Flip          = x

; Here's we're overriding the Direction parameter of the IdleRight animation
; !!! NB: We should *NOT* be using inheritance when defining animations as it will be replaced at runtime to inherit parameters defined at the animation set level
[IdleRight]
; Reading frames from right to left (ie. row -> left) then bottom to top (ie. column - >up)
Direction     = left # up

; Here's we're overriding the Direction parameter of the IdleLeft animation
; !!! NB: We should *NOT* be using inheritance when defining animations as it will be replaced at runtime to inherit parameters defined at the animation set level
[IdleLeft]
; Reading frames from right to left (ie. row -> left) then bottom to top (ie. column - >up)
Direction     = left # up

; Adds left foot event on 1st frame of WalkRight
[WalkRight1]
KeyEvent      = !!Left!!

; Adds right foot event on 4th frame of WalkRight
[WalkRight4]
KeyEvent      = !!Right!!

; Adds right foot event on 1st frame of WalkRight
[WalkLeft1]
KeyEvent      = !!Right!!

; Adds left foot event on 4th frame of WalkLeft
[WalkLeft4]
KeyEvent      = !!Left!!
